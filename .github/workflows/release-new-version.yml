name: Create and publish a new release

on:
  workflow_dispatch:
    inputs:
      version:
        description: >
          Version for new release. Should be a valid semvar version,
          or one of 'major', 'minor', or 'patch'. If not provided,
          version is determined automatically from commits since the
          previous release.
        type: string
        required: false
        default: ""
      pre-release:
        description: Make a pre-release.
        type: boolean
        required: false
        default: false
      pre-release-tag:
        description: >
          Optional pre-release tag. This only has effect
          if making a pre-release, and will create release
          '<major>.<minor>.<patch>-<pre-release-tag>-<pre-release-version>'.
        type: string
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run-test-matrix:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: install poetry
        run: pip install poetry
      - name: install dependencies with poetry
        run: |
          poetry lock
          poetry install --only main --all-extras
      - name: run tests
        run: poetry run python -m unittest -v

  create-release:
    runs-on: ubuntu-latest
    needs: run-test-matrix
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_ACCESS_TOKEN }}
          fetch-depth: 0
      - uses: actions/setup-node@v4

      - name: install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          cache: poetry
      - name: install dependencies with poetry
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --all-extras

      - name: run pre-commit checks
        run: poetry run pre-commit run --all-files

      - name: configure git
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      - name: bump version and create changelog
        run: |
          if [ -z "${{ inputs.version }}" ]; then
            version_arg=""
          else
            version_arg="-r ${{ inputs.version }}"
          fi
          if [ "${{ inputs.pre-release }}" = "true" ]; then
            if [ -z "${{ inputs.pre-release-tag }}" ]; then
              pre_release_arg="-p"
            else
              pre_release_arg="-p ${{ inputs.pre-release-tag }}"
          else
            pre_release_arg=""
          fi
          npx commit-and-tag-version -a ${version_arg} ${pre_release_arg}

      - name: push new version to master
        run: git push --follow-tags origin master

      - name: create github release for new version
        run: npx conventional-github-releaser -p angular
        env:
          CONVENTIONAL_GITHUB_RELEASER_TOKEN: ${{ secrets.RELEASE_ACCESS_TOKEN }}

      - name: create python build of new release
        run: poetry build

      #- name: upload new release to pypi
      #  run: poetry publish -u __token__ -p $PYPI_TOKEN

      - name: get latest git tag
        id: tag
        run: echo "tag=$( git describe --tags --abbrev=0 )" >> $GITHUB_OUTPUT
      - name: extract major and minor versions of latest release
        id: version
        run: echo "version=$( echo ${{ steps.tag.outputs.tag }} | sed -E 's/^v([0-9]+)\.([0-9]+)\..*$/\1.\2/' )" >> $GITHUB_OUTPUT
      - name: publish site for new release
        run: |
          poetry run mike set-default --allow-undefined latest
          poetry run mike deploy --update-aliases --push --allow-empty ${{ steps.version.outputs.version }} latest
